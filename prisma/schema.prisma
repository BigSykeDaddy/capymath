generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(uuid())
  email                  String             @unique
  name                   String?
  role                   Role               @default(child)
  parentId               String?
  parent                 User?              @relation("ParentChildren", fields: [parentId], references: [id])
  children               User[]             @relation("ParentChildren")
  attempts               Attempt[]
  practiceSessions       PracticeSession[]
  accounts               Account[]          @relation("UserAccounts")
  sessions               Session[]          @relation("UserSessions")
  createdAt              DateTime           @default(now())
  passwordHash           String?
  emailVerified          DateTime?          // ✅ now accepts null or Date
  verificationToken      String?            // ✅ used in email verification
  verificationTokenExpires DateTime?        // ✅ when token becomes invalid
}

model Attempt {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  problem     String
  correct     Boolean
  timeMs      Int
  mode        String
  attemptedAt DateTime @default(now())
}

model PracticeSession {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  mode         String
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  problems     Problem[]
}

model Problem {
  id          String           @id @default(uuid())
  session     PracticeSession  @relation(fields: [sessionId], references: [id])
  sessionId   String
  question    String
  userAnswer  String
  correct     Boolean
  round       Int
  timeMs      Int
}

enum Role {
  parent
  child
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User     @relation("UserAccounts", fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation("UserSessions", fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
